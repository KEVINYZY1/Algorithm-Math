binary-tree-preorder-traversal

Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree{1,#,2,3},

   1
    \
     2
    /
   3

return[1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

import java.util.ArrayList;
import java.util.Stack;

public class Solution {
    public static ArrayList<Integer> preorderTraversal(TreeNode root) {
        if (null == root) {
            return new ArrayList<Integer>();
        }
        ArrayList<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        TreeNode currentNode;
        while (0 != stack.size()) {
            currentNode = stack.pop();
            result.add(currentNode.val);
            if (null != currentNode.right) {
                stack.push(currentNode.right);
            }
            if (null != currentNode.left) {
                stack.push(currentNode.left);
            }
        }
        return result;
    }
}
